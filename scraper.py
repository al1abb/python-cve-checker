import requests
from bs4 import BeautifulSoup
from helpers import cvss_color_calc
from constants import search_urls

def scrape_nvd(cve_id):
    url = search_urls["NVDNIST"]
    response = requests.get(url + cve_id)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, "html.parser")

        # Check for CVE ID Not Found
        if soup.find("div", {"id": "ErrorPanel"}):
            cve_data = {"error": f"{cve_id} Not Found"}
            return cve_data

        # Extract the vulnerability description
        description = soup.find("p", {"data-testid": "vuln-description"})
        description = (
            description.text.strip() if description else "No description found"
        )

        cvss_score = soup.find("a", {"data-testid": "vuln-cvss3-panel-score"})
        cvss_score = cvss_score.text.strip() if cvss_score else "N/A"

        cvss_color = cvss_color_calc(cvss_score)
        cvss_vector = soup.find("span", {"data-testid": "vuln-cvss3-nist-vector"})
        cvss_vector = cvss_vector.text.strip() if cvss_vector else "N/A"

        cve_data = {
            "id": cve_id.upper(),
            "description": description,
            "cvss_score": cvss_score,
            "cvss_color": cvss_color,
            "cvss_vector": cvss_vector,
            "source": url + cve_id,
            "source_label": "NVD NIST",
        }
    else:
        cve_data = {
            "error": "Failed to retrieve CVE data. Status code: {}".format(
                response.status_code
            )
        }

    return cve_data


def scrape_cveorg(cve_id):
    url = search_urls["CVEOrg"]
    response = requests.get(url + cve_id)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, "html.parser")
        status = soup.find("span", {"class": "cve-state-tag"})

        cve_data = {
            "status": status
        }
    else:
        cve_data = {
            "error": "Failed to retrieve CVE data. Status code: {}".format(
                response.status_code
            )
        }
    return cve_data
