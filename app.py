from flask import Flask, request, render_template, send_file, session
from scraper import scrape_nvd, scrape_cveorg, scrape_cvedetails, scrape_exploitdb
from helpers import is_valid_cve
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.units import inch  
import io
from reportlab.lib.enums import TA_LEFT
from reportlab.lib.styles import ParagraphStyle
from docx import Document
from docx.shared import Pt
from docx.oxml.ns import nsdecls
from docx.oxml import parse_xml
from docx.shared import RGBColor

app = Flask(__name__)
app.secret_key = 'your_secret_key'

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/cve', methods=['POST'])
def cve_checker():
    cve_id = request.form['cve_id'].upper()
    cve_passed_regex = is_valid_cve(cve_id)

    if cve_passed_regex:
        nvd_data = scrape_nvd(cve_id)
        cveorg_data = scrape_cveorg(cve_id)
        cvedetails_data = scrape_cvedetails(cve_id)
        exploits = scrape_exploitdb(cve_id)

        cve_data = {**nvd_data, **cveorg_data, **cvedetails_data}
        
        session['cve_data'] = cve_data
        return render_template('searchresult.html', cve_data=cve_data, exploits=exploits)
    else:
        return render_template('searchresult.html', cve_data={'error': 'CVE not found or wrong CVE format'})

@app.route('/download/pdf')
def download_pdf():
    cve_data = session.get('cve_data')

    if not cve_data:
        return "No CVE data available to generate the PDF.", 400

    pdf_buffer = io.BytesIO()
    generate_pdf(cve_data, pdf_buffer)
    pdf_buffer.seek(0)
    
    return send_file(pdf_buffer, as_attachment=True, download_name='cve_report.pdf', mimetype='application/pdf')

def generate_pdf(cve_data, buffer):
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    elements = []

    # Add a title
    styles = getSampleStyleSheet()
    title = Paragraph("CVE Report", styles['Title'])
    elements.append(title)

    # Define a custom paragraph style for table content
    custom_style = ParagraphStyle(
        name="Custom",
        fontSize=10,
        leading=12,
        alignment=TA_LEFT,
        wordWrap='CJK'  # Enables text wrapping
    )

    # Prepare data for the table
    table_data = [["Key", "Value"]]  # Table header

    for key, value in cve_data.items():
        if key in ['cvss_color', 'status_color']:
            continue  # Skip these fields

        # Format the key: uppercase and replace underscores with spaces
        formatted_key = key.upper().replace('_', ' ')

        # Check if value needs to be a Paragraph
        if isinstance(value, str):
            if len(value) > 50:  # Adjust threshold as needed
                value = Paragraph(value, custom_style)
            else:
                value = Paragraph(value, custom_style)
        elif isinstance(value, dict):
            # Debugging: Print out the type of value if it's a dictionary
            print(f"Debug: Value for key '{key}' is a dictionary: {value}")
            value = Paragraph(str(value), custom_style)  # Convert dict to string and then to Paragraph
        else:
            # Handle other types of values if needed
            print(f"Debug: Value for key '{key}' is of type {type(value)}")
            value = Paragraph(str(value), custom_style)

        table_data.append([formatted_key, value])

    # Create a table with style
    table = Table(table_data, colWidths=[2.5 * inch, 4.5 * inch])  # Adjust column widths as needed
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('ALIGN', (0, 1), (-1, -1), 'LEFT')
    ]))

    elements.append(table)

    # Build the PDF document
    doc.build(elements)

@app.route('/download/word')
def download_word():
    cve_data = session.get('cve_data')

    if not cve_data:
        return "No CVE data available to generate the Word document.", 400

    # Create an in-memory buffer
    word_buffer = io.BytesIO()
    
    # Generate the Word document and write it to the buffer
    generate_word(cve_data, word_buffer)
    
    # Move the pointer to the beginning of the buffer
    word_buffer.seek(0)

    # Send the buffer as a downloadable Word file
    return send_file(word_buffer, as_attachment=True, download_name='cve_report.docx', mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document')

def generate_word(cve_data, buffer):
    doc = Document()

    # Add a title with styling
    title = doc.add_heading("CVE Report", level=1)
    title_format = title.paragraph_format
    title_format.space_after = Pt(12)

    # Style for key headings (formatted key names)
    key_style = doc.styles.add_style('KeyStyle', 1)
    key_font = key_style.font
    key_font.bold = True
    key_font.size = Pt(12)
    key_font.color.rgb = RGBColor(0, 102, 204)  # Dark blue color

    # Style for values
    value_style = doc.styles.add_style('ValueStyle', 1)
    value_font = value_style.font
    value_font.size = Pt(11)

    # Add key-value pairs to the Word document with formatting
    for key, value in cve_data.items():
        if key in ['cvss_color', 'status_color']:
            continue  # Skip these fields

        # Format the key: uppercase and replace underscores with spaces
        formatted_key = key.upper().replace('_', ' ')

        # Add the key with the custom style
        key_paragraph = doc.add_paragraph(f"{formatted_key}:", style='KeyStyle')

        # Add the value with the custom style
        value_paragraph = doc.add_paragraph(str(value), style='ValueStyle')

        # Add space after each entry for better readability
        key_paragraph.paragraph_format.space_after = Pt(4)
        value_paragraph.paragraph_format.space_after = Pt(8)

        # Alternate background color for better readability
        if len(doc.paragraphs) % 2 == 0:
            shading_elm = parse_xml(r'<w:shd {} w:fill="F2F2F2"/>'.format(nsdecls('w')))
            key_paragraph._p.get_or_add_pPr().append(shading_elm)
            value_paragraph._p.get_or_add_pPr().append(shading_elm)

    # Save the document to the buffer
    doc.save(buffer)

if __name__ == '__main__':
    app.run(debug=True)
