from flask import Flask, request, render_template, send_file, session
from scraper import scrape_nvd, scrape_cveorg, scrape_cvedetails
from helpers import is_valid_cve
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.units import inch  
import io
from reportlab.lib.enums import TA_LEFT
from reportlab.lib.styles import ParagraphStyle

app = Flask(__name__)
app.secret_key = 'your_secret_key'

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/cve', methods=['POST'])
def cve_checker():
    cve_id = request.form['cve_id'].upper()
    cve_passed_regex = is_valid_cve(cve_id)

    if cve_passed_regex:
        nvd_data = scrape_nvd(cve_id)
        cveorg_data = scrape_cveorg(cve_id)
        cvedetails_data = scrape_cvedetails(cve_id)
        cve_data = {**nvd_data, **cveorg_data, **cvedetails_data}
        session['cve_data'] = cve_data
        return render_template('searchresult.html', cve_data=cve_data)
    else:
        return render_template('searchresult.html', cve_data={'error': 'CVE not found or wrong CVE format'})

@app.route('/download/pdf')
def download_pdf():
    cve_data = session.get('cve_data')

    if not cve_data:
        return "No CVE data available to generate the PDF.", 400

    pdf_buffer = io.BytesIO()
    generate_pdf(cve_data, pdf_buffer)
    pdf_buffer.seek(0)
    
    return send_file(pdf_buffer, as_attachment=True, download_name='cve_report.pdf', mimetype='application/pdf')

def generate_pdf(cve_data, buffer):
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    elements = []

    # Add a title
    styles = getSampleStyleSheet()
    title = Paragraph("CVE Report", styles['Title'])
    elements.append(title)

    # Define a custom paragraph style for table content
    custom_style = ParagraphStyle(
        name="Custom",
        fontSize=10,
        leading=12,
        alignment=TA_LEFT,
        wordWrap='CJK'  # Enables text wrapping
    )

    # Prepare data for the table
    table_data = [["Key", "Value"]]  # Table header

    for key, value in cve_data.items():
        if key in ['cvss_color', 'status_color']:
            continue  # Skip these fields

        # Format the key: uppercase and replace underscores with spaces
        formatted_key = key.upper().replace('_', ' ')

        # Check if value needs to be a Paragraph
        if isinstance(value, str):
            if len(value) > 50:  # Adjust threshold as needed
                value = Paragraph(value, custom_style)
            else:
                value = Paragraph(value, custom_style)
        elif isinstance(value, dict):
            # Debugging: Print out the type of value if it's a dictionary
            print(f"Debug: Value for key '{key}' is a dictionary: {value}")
            value = Paragraph(str(value), custom_style)  # Convert dict to string and then to Paragraph
        else:
            # Handle other types of values if needed
            print(f"Debug: Value for key '{key}' is of type {type(value)}")
            value = Paragraph(str(value), custom_style)

        table_data.append([formatted_key, value])

    # Create a table with style
    table = Table(table_data, colWidths=[2.5 * inch, 4.5 * inch])  # Adjust column widths as needed
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('ALIGN', (0, 1), (-1, -1), 'LEFT')
    ]))

    elements.append(table)

    # Build the PDF document
    doc.build(elements)




if __name__ == '__main__':
    app.run(debug=True)
