from flask import Flask, request, render_template
from scraper import scrape_nvd, scrape_cveorg, scrape_cvedetails
from helpers import is_valid_cve

#comment
app = Flask(__name__)

"""
A function that serves as the route handler for the root URL ("/").
It renders the "index.html" template and returns the rendered HTML as a response.
Returns:
    str: The rendered HTML as a response.
"""
@app.route('/')
def home():
    return render_template('index.html')

"""
A function that serves as the route handler for the "/cve" endpoint.
It retrieves the value of the "cve_id" parameter from the request form and
calls the scrape_nvd(), scrape_cveorg(), and scrape_cvedetails() functions
with the cve_id as input. 
It then updates the cve_data dictionary with the
scraped data and renders the "searchresult.html" template with the cve_data
as a context.
Returns:
    str: The rendered HTML as a response.
"""
@app.route('/cve', methods=['POST'])
def cve_checker():
    cve_id = request.form['cve_id']
    cve_id = cve_id.upper()

    # Check for cve_id regex
    cve_passed_regex = is_valid_cve(cve_id)

    if(cve_passed_regex):
        nvd_data = scrape_nvd(cve_id)
        cveorg_data = scrape_cveorg(cve_id)
        cvedetails_data = scrape_cvedetails(cve_id)

        # Flatten the dictionaries by updating one with the other
        cve_data = {**nvd_data, **cveorg_data, **cvedetails_data}

        return render_template('searchresult.html', cve_data=cve_data)
    else:
        return render_template('searchresult.html', cve_data={'error': 'CVE not found or wrong CVE format'})


if __name__ == '__main__':
    app.run(debug=True)
